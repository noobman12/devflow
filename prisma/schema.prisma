generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String        @unique
  email       String        @unique
  bio         String?
  image       String?
  location    String?
  portfolio   String?
  reputation  Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  accounts     Account[]
  questions    Question[]
  answers      Answer[]
  collections  Collection[]
  interactions Interaction[]
  votes        Vote[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  name              String
  image             String?
  password          String?
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Question {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  views      Int      @default(0)
  answers    Int      @default(0)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  authorId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        TagQuestion[]
  answer      Answer[]
  collections Collection[]
  interactions Interaction[]
  votes       Vote[]
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String   @db.ObjectId
  questionId String   @db.ObjectId
  content    String
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question  Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  interactions Interaction[]
  votes     Vote[]
}

model Tag {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  questions Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Question  TagQuestion[]
}

model TagQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tagId      String   @db.ObjectId
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([tagId, questionId])
}

model Collection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String   @db.ObjectId
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([authorId, questionId])
}

model Interaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  action     String
  questionId String?  @db.ObjectId
  answerId   String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String   @db.ObjectId
  questionId String?  @db.ObjectId
  answerId   String?  @db.ObjectId
  voteType   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}
